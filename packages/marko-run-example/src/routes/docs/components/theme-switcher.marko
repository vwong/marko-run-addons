<!-- use tags -->
import "#styles/button.scss";
import "#styles/visually-hidden.scss";
<id/switcher/>
<let/theme=globalThis.localStorage?.getItem("theme") || ""/>
<lifecycle onMount() {
  if (theme) {
    document.documentElement.classList.add(theme);
  }
}/>

<div class="theme-switcher">
  <label for=switcher>
    Theme
  </label>
  <ul class="theme-switcher__buttons" id=switcher>
    <li>
      <button
        aria-pressed=(theme === "light" ? "true" : "false")
        class="theme-switcher__button theme-switcher__button--first"
        onClick() {
          const { classList } = document.documentElement;
          classList.add("light");
          classList.remove("dark");
          localStorage.setItem("theme", "light");
          theme = "light";
        }
      >
        <icon="sun"/>
        <div class="visually-hidden">
          Light
        </div>
      </button>
    </li>
    <li>
      <button
        aria-pressed=(theme === "dark" ? "true" : "false")
        class="theme-switcher__button"
        onClick() {
          const { classList } = document.documentElement;
          classList.remove("light");
          classList.add("dark");
          localStorage.setItem("theme", "dark");
          theme = "dark";
        }
      >
        <icon="moon"/>
        <div class="visually-hidden">
          Dark
        </div>
      </button>
    </li>
    <li>
      <button
        aria-pressed=(theme === "" ? "true" : "false")
        class="theme-switcher__button theme-switcher__button--last"
        onClick() {
          const { classList } = document.documentElement;
          classList.remove("light");
          classList.remove("dark");
          localStorage.removeItem("theme");
          theme = "";
        }
      >
        <icon="monitor"/>
        <div class="visually-hidden">
          System
        </div>
      </button>
    </li>
  </ul>
</div>

<style.scss>
  .theme-switcher {
    align-items: center;
    display: inline-grid;
    gap: $s-8;
    grid-template-columns: auto auto;

    &__buttons {
      display: flex;
      list-style: none;
      padding: 0;
    }

    &__button {
      background: none;
      border: 1px solid $foreground-color-neutral-60;
      border-left: none;

      &--first {
        border: 1px solid $foreground-color-neutral-60;
        border-bottom-left-radius: $radius-m;
        border-top-left-radius: $radius-m;
      }

      &--last {
        border-bottom-right-radius: $radius-m;
        border-top-right-radius: $radius-m;
      }

      &:hover {
        background: $background-color-neutral-10;
      }

      &[aria-pressed="true"] {
        background: $background-color-neutral-20;
      }
    }

    @media (scripting: none) {
      display: none !important;
    }
  }
</style>
