import type { BodySchema } from "./request-body+handler";

<let/errors=Object.fromEntries(
  $global.lastBodyErrors.map(({ name, message }) => [name, message]),
)>
<let/isPending=false>
<let/isError=false>

<layout-doc>
  <h1>Request Body</h1>

  <h2>With CSRF Token</h2>
  <p>
    This uses native form POST submissions. It will fail server-side validation
    when the count is greater than 5.
  </p>
  <form/form class="count-form" method="POST">
    <csrf-token/>
    <div>
      <input-field
        error=errors.count
        label="Count"
        name="count"
        required
        title=" "
        type="number"
        value=(($global.lastBody as BodySchema)?.count || 0)/>
    </div>

    <div>
      <input-field
        error=errors.count2
        label="Count2"
        name="count2"
        required
        type="number"
        value=(($global.lastBody as BodySchema)?.count2 || 0)/>
    </div>

    <div>
      <button class="button" disabled=isPending || isError type="submit">
        Submit
      </button>
    </div>
  </form>
  <p>
    <on-change-validate isError:=isError isPending:=isPending ref=form/>
  </p>
</layout-doc>

<style.scss>
  .count-form {
    display: grid;
    gap: $v-10;
  }
</style>
