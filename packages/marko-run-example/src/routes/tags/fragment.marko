client import { removeFalseyValues } from "#lib/utils";
export interface Input {
  errorMessage: string;
  src: MarkoRun.GetPaths;
}
server const base = "http://ignored";

<const/loader=(
  (globalThis.__marko_run__
    ? globalThis.__marko_run__.fetch(
        new Request(`${base}${input.src}`, {
          headers: $global.request.headers,
        }),
        $global.platform,
      )
    : fetch(input.src, {
        headers: removeFalseyValues({
          "Cache-control": $global.isHardReload ? "no-cache" : undefined,
          "X-Nonce": $global.cspNonce,
          "X-Requested-With": "XMLHttpRequest",
        }) as HeadersInit,
        signal: $signal,
      })
  )
    .then((response) => {
      if (response?.ok) {
        return response.text();
      } else {
        throw new Error(`Error fetching ${input.src}`);
      }
    })
    .catch((error) => {
      if (error.name === "AbortError") {
        return;
      }
      throw error;
    })
)>

<key=input.src>
  <try>
    <if=!globalThis.__marko_run__ || $global.hasClientJs>
      <@placeholder>
        <loader/>
      </@placeholder>
    </if>

    <@catch>
      <notification="error">
        ${input.errorMessage}
      </notification>
    </@catch>

    <await|html: string|=loader>
      <div/result>
        $!{html}
      </div>

      <script>
        const fragment = document.createRange().createContextualFragment(html);
        const el = result();
        el.textContent = "";
        el.append(fragment);
      </script>
    </await>
  </try>
</key>
