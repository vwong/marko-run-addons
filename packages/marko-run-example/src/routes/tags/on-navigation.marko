export interface Input<T> {
  navKey: string;
  value: T;
  valueChange: (p: T) => void;
}

<script>
  if (globalThis.history) {
    globalThis.history.replaceState(
      Object.assign({}, globalThis.history.state, {
        [input.navKey]: input.value,
      }),
      "",
    );
    globalThis.addEventListener("popstate", (event: PopStateEvent) => {
      if (event.state && event.state[input.navKey] !== input.value) {
        input.valueChange(event.state[input.navKey]);
      }
    });
  }
</script>

<return=(
  (page: T) => (event: Event) => {
    event.preventDefault();

    const params = Object.assign({}, globalThis.history.state, {
      [input.navKey]: page,
    });

    globalThis.history.pushState(
      params,
      "",
      "?" + new URLSearchParams(params).toString(),
    );
    input.valueChange(page);
  }
)/>
