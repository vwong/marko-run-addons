import type { BodySchema } from "./+meta";
$ const errors = Object.fromEntries(
  $global.lastBodyErrors.map(({ name, message }) => [name, message]),
);
<layout-doc>
  <h1>Request Body</h1>

  <h2>With CSRF Token</h2>
  <p>
    This uses native form POST submissions. It will fail server-side validation when the count is greater than 5.
  </p>
  <form id:scoped="form" method="POST">
    <csrf-token/>
    <input-field
      error=errors.count
      label="Count"
      name="count"
      required
      title=" "
      type="number"
      value=(($global.lastBody as BodySchema)?.count || 0)
    />

    <input-field
      error=errors.count2
      label="Count2"
      name="count2"
      required
      type="number"
      value=(($global.lastBody as BodySchema)?.count2 || 0)
    />
  </form>
  <p>
    <form-submit-button for:scoped="form">
      Submit
    </form-submit-button>
  </p>

  <h2>Note about CSRF Tokens life</h2>
  <p>
    CSRF Tokens have short lives (about a typical session), and are rotated frequently to avoid replay attacks. If the user has been idle for a while, they may encounter an expired CSRF token. This will get regenerated on the next visit.
  </p>
</layout-doc>

<style-button/>
