// @ts-nocheck

<!-- use tags -->
export interface Input {
  isError: boolean;
  isErrorChange: (value: boolean) => void;
  isPending: boolean;
  isPendingChange: (value: boolean) => void;
  src: MarkoRun.GetPaths;
}

<micro-frame
  fetch(url, options) {
    return new Promise((resolve) => {
      setTimeout(() => {
        input.isPendingChange(true);
        input.isErrorChange(false);
        resolve(
          globalThis
            .fetch(url, {
              ...options,
              headers: {
                ...options.headers,
                "X-Requested-With": "XMLHttpRequest",
              },
            })
            .catch(() => {
              input.isErrorChange(true);
            })
            .finally(() => {
              input.isPendingChange(false);
            }),
        );
      }, 0);
    });
  }
  src=input.src
>
  <@loading>
    <${input.loading}/>
  </@loading>
  <@error|err|>
    <${input.error}=err/>
  </@error>
</micro-frame>
